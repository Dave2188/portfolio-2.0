const thoughts = [
	{
		topic: "Learning to Code",
		thought:
			"Learning to code has been one of the best decisions that I`ve made. That being said, its not all fun and games. It's hard and, as many of you know, even more difficult than the videos and advertisements make it out to be. Granted, there are the few that made it in a few months time but that is the rare exception. You have to realize that it is a commitment that can easily fall to the wayside if you're not completely dedicated to the goal. Staying consistent is difficult when life is going on around you and it tends to get in the way at times. In the end, all the late nights, tired days at your 9-5, and moments that make you feel frustrated and defeated will be worth all of those sacrifices  when you reach that goal. Then you can look back and say 'yeah, I did that!'",
	},
	{
		topic: "The Honeymoon Phase",
		thought:
			"In the beginning you will likely start with HTML/CSS as do most. Those first few days/weeks are amazing. For me, it was refreshing to learn new things after not being mentally challenged in a long time. HTML does go by rather quickly. It makes sense and isn't too difficult to get a grasp of. There is the matter of semantics and accessibility that play an important role when you start to develop real world applications. After that, it is common to move right into CSS. This is where you get the first little hint that things might not be as easy as you where led to believe. CSS is the interior designer of the web, you're going to hate it or love it. There are far too many styling properties to memorize so don't let that overwhelm you. There is a plethora of references at your disposal. Be sure to pay special attention to specificity and how its calculated; this will greatly benefit you later. Transitions are also important and you should know what possibilities they offer. Learn those as the need for them in your projects arise. Taking all of that into consideration, your spirits will still be high thinking 'this isn`t so bad, maybe this wont the that hard.' At least thats how I felt.",
	},
	{
		topic: "Javascript",
		thought:
			"The dive into javascript also felt pretty easy at first. You have your basic data types and exactly how many there are seems to be up to debate depending on who you ask. They are String, Number, Boolean, Object, and Undefined. Easy enough, right? Learning what they are and how to use them is all pretty straight forward. Once that's over you get into variables and the instance of said variables. Things get a little tricky once you start renaming, changing values, and realizing that depending on how you do it, could still point to the same instance. From then on it's a deep dive into object classes, arrays, methods, getters, setters, functions, the list goes on... At this point you're thinking, 'that was rough but I still got this'. Now that the course that you followed along with is over, there is one thing left to do: build something on your own without the step by step instructions that have been your safety net. For me, that was the first time I started to have doubts on whether or not I could really do this. Knowing what things are and what they do is the easy part. Putting these things together in a way that gets the desired outcome is where it naturally starts to feel difficult again. Don`t let this discourage you! Easier said than done, I know. Stay consistent. After all, it's the key to learning. Remember: Edison tried a thousand times to make the light bulb before he got it right!",
	},
	{
		topic: "React",
		thought:
			"React is a javascript library created by Facebook so it could be the app we all know today. You will find that if you want to land a job in today's world, learning a javascript library is pretty much a necessity. There are a few main ones to choose from including, but not limited to, React, Angular, and Vue. If you`ve done the research, you'll know that React has the largest adoption by companies at the moment. If you're going to learn one that has the most opportunity, React is the way to go. In my experience, the concept of React that gave me the most trouble is the way that it renders and updates the Dom. The basic concept of how it does this is that, by comparing the Dom of the browser and a virtual re-creation, it is then able to only change the elements that differ. There are various different times and ways to make it check for changes such as when the component mounts, unmounts, or when data changes and you want the change to reflect that on the screen. As I gained more experience, I started to realize that certain rerenders would trigger other rerenders which would then sometimes create an infinite loop, ultimately crashing the browser. So keep in mind: Render can work with you or against you so it's important to pay attention.",
	},
	{
		topic: "Tutorial Hell",
		thought:
			"I`m sure that you have come across the advice not to get stuck in tutorial hell. I know I did but, at the time, didn't think that it was an issue. It is difficult at first because you get to the point where the realization hits that there is still so much you don`t know and the feeling of needing to learn more kicks in. In my case, it was a mix of that and the thought that I needed to learn just one more thing to build that next project. It's what some call busy work: doing something without actually doing anything. Granted, I was still learning what was out there but not taking the time to practice and apply the subjects I learned. You will find that the feeling of needing to learn that one more subject or technology will never go away. Things in this field are ever-changing. If any of this sounds familiar then you, too, might be stuck in tutorial hell. Take the time and practice the things you learn as you go along because it's will save you time in the long run. The next best thing will always be out there because that is the nature of technology. Hopefully that excites you like it does me!",
	},
	{
		topic: "CSS vs. Libraries",
		thought:
			"I`ve come to the conclusion that vanilla CSS is, in most cases, the way to go. I've come to realize that this isn't necessarily the popular opinion but, after trying some of the other options, I still come back to it. The main ones like BootStrap and Tailwind use class names to add styles to the elements. Now, do they come in handy when you have to add just a few styles? Absolutely! The main thing I`m not a fan of is the readability when elements start to get 10+ class names. I`ve encountered some people that use a mix of both, and some that say absolutely not. As with everything else, people have their own opinions and you will develop yours. In my last project I used a mix of Tailwind and CSS and felt that it was the best of both worlds. You can use the easy built-in class styles that get things close to where you want them and then use CSS to fine tune things from there. One thing that I do really like about the libraries are the simple animations. Whats your take on the two?",
	},
	{
		topic: "Vue.js",
		thought:
			"I recently took the time to learn Vue and I have to say that I`m a fan. So far its been a much less steep learning curve in comparison to React. Like all libraries it has its share of 'gotchas'. The single file structure of components is really nice. Having the HTML template, logic, and styles right there in the same place is very convenient. After learning about both the Options API and Component API and the differences, it's tough to choose which I prefer. On the one hand I feel like the Options API has somewhat of a predefined structure in the way it has you add data and functionality by the use of the methods, props, data, and computed properties. On the other hand I can see the benefit of the Component API method and having the freedom to structure it as you see fit with all the related data grouped together. It's also slightly more simple to keep your data reactive with Options API because its pretty much baked in with binding the data vs having to call ref or reactive on the data first and then bind it. In addition, when choosing between ref and reactive, you must consider how each has different methods of changing values. The lack of required semicolons takes a minute to get used to, as does when single quotes are used over double quotes and its purpose. Vue's use of directives as attributes to conditionally render, or add event listeners to an element is also very approachable. So, for me, the next goal is to tackle NUXT and, from what I`ve seen so far, it's like a fully loaded version of Vue that has a variety of plugins designed for various aspects of building applications.",
	},
	{
		topic: "Stay Tuned...",
		thought: "Make sure to stop back for more of my random thoughts as they come to mind!",
	},
];

export default thoughts;
